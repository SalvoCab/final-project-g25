services:
  keycloak:
    #build: ./keycloak_spi
    image: keycloak/keycloak
    ports:
      - '9095:8080'
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: password
      PROXY_ADDRESS_FORWARDING: true
      KC_HOSTNAME: http://localhost:9095
      KEYCLOAK_FRONTEND_URL: http://localhost:9095
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      KC_HEALTH_ENABLED: true
    volumes:
      - ./kc1-realm.json:/opt/keycloak/data/import/kc1-realm.json
    command:
      - start-dev
      - --import-realm
    networks:
      - kfk-net
      - keycloak
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/localhost/9000 && echo -e 'GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n' >&3 && cat <&3 | grep -q '200 OK'" ]
      start_period: 60s
      interval: 5s
      timeout: 1s
      retries: 10

  kafka:
    image: 'bitnami/kafka:3.7'
    hostname: kafka
    ports:
      - "9092:9092"
    volumes:
      - 'kafka_data:/bitnami'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    networks:
      - kfk-net
    healthcheck:
      test: kafka-topics.sh --bootstrap-server localhost:9092 --list
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 10

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9091:8080"
    environment:
      KAFKA_CLUSTER_0_NAME: kafka
      KAFKA_CLUSTER_0_BOOTSTRAPSERVERS: kafka:29092
      DYNAMIC_CONFIG_ENABLED: 'true'
    networks:
      - kfk-net
    healthcheck:
      test: wget --spider -q http://localhost:8080/ || exit 1
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 10

#  api_gateway_app:
#    build: ./api_gateway
#    image: 'api_gateway:latest'
#    ports:
#      - '8080:8080'
##    networks:
##      - keycloak
##      - kfk-net
#    depends_on:
#      keycloak:
#        condition: service_healthy
#      kafka:
#        condition: service_healthy
#    network_mode: host
#    healthcheck:
#      test: wget --spider -q http://localhost:8080/ || exit 1
#      start_period: 5s
#      interval: 5s
#      timeout: 1s
#      retries: 10

#  cm_app:
#    build: ./communication_manager
#    image: 'communication_manager:latest'
#    networks:
#      - keycloak
#      - kfk-net
#      - postgres
#    ports:
#      - '8082:8082'
#    depends_on:
#      postgres:
#        condition: service_healthy
#    healthcheck:
#      test: wget --spider -q http://localhost:8082/actuator/health || exit
#      start_period: 20s
#      interval: 5s
#      timeout: 1s
#      retries: 10
#
#  crm_app:
#    build: ./customer_relationship_management
#    image: 'customer_relationship_management:latest'
#    ports:
#      - '8050:8050'
#    depends_on:
#      kafka:
#        condition: service_healthy
#      postgres:
#        condition: service_healthy
#    networks:
#      - kfk-net
#      - postgres
#      - keycloak
#    healthcheck:
#      test: wget --spider -q http://localhost:8050/actuator/health || exit 1
#      start_period: 5s
#      interval: 5s
#      timeout: 1s
#      retries: 10
#
#  ds_app:
#    build: ./document_store
#    image: 'document_store:latest'
#    ports:
#      - '8052:8052'
#    depends_on:
#      postgres:
#        condition: service_healthy
#    networks:
#      - kfk-net
#      - postgres
#    healthcheck:
#      test: wget --spider -q http://localhost:8052/actuator/health || exit
#      start_period: 20s
#      interval: 5s
#      timeout: 1s
#      retries: 10
#
#  front_end_app:
#    build: ./front_end
#    image: 'front_end:latest'
#    ports:
#      - '5173:5173'
#    healthcheck:
#      test: curl -f http://localhost:5173 || exit 1
#      start_period: 1s
#      interval: 5s
#      timeout: 1s
#      retries: 10

  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=mydatabase'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=myuser'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "mydatabase"]
      start_period: 1s
      interval: 5s
      timeout: 5s
      retries: 10

  analytics:
    build: ./analytics
    image: analytics:latest
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - kfk-net
      - keycloak
      - postgres
    ports:
      - "8084:8084"
    healthcheck:
      test: bash -c ':> /dev/tcp/localhost/8084'
      start_period: 15s
      interval: 5s
      timeout: 1s
      retries: 10

#  analytics_db:
#    image: 'postgres:latest'
#    environment:
#      - 'POSTGRES_DB=mydatabase'
#      - 'POSTGRES_PASSWORD=secret'
#      - 'POSTGRES_USER=myuser'
#    volumes:
#      - analytics_data:/var/lib/postgresql/data
#    networks:
#      - analytics-net
#    healthcheck:
#      test: ["CMD-SHELL", "pg_isready", "-d", "mydatabase"]
#      start_period: 1s
#      interval: 5s
#      timeout: 5s
#      retries: 10

networks:
  kfk-net:
    driver: bridge
  keycloak:
    driver: bridge
  postgres:
    driver: bridge

volumes:
  postgres_data:
  kafka_data: